{
	"info": {
		"_postman_id": "0cf68f95-b2cd-49d2-af4f-c0e6a5c312b0",
		"name": "Team2_API Commandos",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Data Driven",
			"item": [
				{
					"name": "UserLogin",
					"item": [
						{
							"name": "Admin Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ae8d7c71-2e67-4086-a1c3-8d097bb3f7c6",
										"exec": [
											"// const commonUtils = pm.require('@postman-hackathon-4703/common-utils');\r",
											"\r",
											"let bodyData = pm.response.json();\r",
											"\r",
											"let token = bodyData.token;\r",
											"pm.globals.set(\"token\", token);\r",
											"\r",
											"pm.test('Verify user signed in', () => {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.token).to.eql(pm.globals.get('token'));\r",
											"});\r",
											"\r",
											"pm.test(`Verify userId is a number`, function () {\r",
											"        let bodyData = pm.response.json();\r",
											"        let key = 'userId';\r",
											"        pm.expect(bodyData).to.have.property(key);\r",
											"        pm.expect(bodyData[key]).to.be.a('number');\r",
											"    });\r",
											"\r",
											"pm.test('Verify Role is - ROLE_ADMIN', function () {\r",
											"        pm.expect(pm.response.text()).to.include('ROLE_ADMIN');\r",
											"    });\r",
											"\r",
											"pm.test(`Status code is 200`, function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"pm.test(\"Response Header Content-Type is application/json\", function () {\r",
											"        pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
											"    });\r",
											"\r",
											"pm.test(\"Verify Response has Body or not\", function(){\r",
											"    pm.response.to.be.withBody;\r",
											"     }); \r",
											"\r",
											"pm.test(\"Verify Response Body as JSON\", function(){\r",
											"    pm.response.to.be.json;\r",
											"    // pm.response.to.have.body({key:value});\r",
											"    });   \r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"\r",
											"//Schema Validation\r",
											"const schema={\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"token\": { \"type\": \"string\" },\r",
											"    \"type\": { \"type\": \"string\" },\r",
											"    \"userId\": { \"type\": \"number\" },\r",
											"    \"loginUserEmail\": { \"type\": \"string\" },\r",
											"    \"roles\": { \"type\": \"array\" }\r",
											"  },\r",
											"  \"required\": [\"token\", \"type\", \"userId\", \"loginUserEmail\", \"roles\"]\r",
											"}\r",
											"\r",
											"pm.test(\"Schema - Validation Response contain valid response data - schema validation\", () => {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"// function getAdminToken(){\r",
											"//     bodyData = pm.response.json();\r",
											"//     TokenValue = bodyData.token;\r",
											"//     console.log(\"Token: \" + TokenValue);\r",
											"//     return TokenValue;\r",
											"// }\r",
											"// pm.collectionVariables.set(\"adminToken\", getAdminToken());\r",
											"//Validation\r",
											"\r",
											"\r",
											"// PostmanLegacy.setNextRequest('Create New Dietician');\r",
											"// pm.execution.setNextRequest('Create New Dietician Copy');\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e2cc25f0-8b69-4f7b-a56c-0ccb258faf19",
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "2af1a399-1a77-4aa1-9c53-e250bee31000",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"userLoginEmailId\": \"{{userLoginEmailId}}\",\n\"password\":\"{{password}}\"\n}\n\n\n\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": ""
							},
							"response": [
								{
									"id": "41671c13-bd89-407c-9144-712272690f22",
									"name": "admin Login",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"password\": \"test\",\n  \"userLoginEmail\": \"Team6@gmail.com\"\n}\n\n\n\n\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseUrl}}/login",
											"host": [
												"{{BaseUrl}}"
											],
											"path": [
												"login"
											],
											"query": [
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1723106690&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=FCpchhkOvdlJSaQgPHC9O0KzTAvdwpW9fRgna1VvGQg%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1723106690&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=FCpchhkOvdlJSaQgPHC9O0KzTAvdwpW9fRgna1VvGQg%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Thu, 08 Aug 2024 08:44:50 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"token\": \"eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJUZWFtNkBnbWFpbC5jb20iLCJpYXQiOjE3MjMxMDY2OTAsImV4cCI6MTcyMzEzNTQ5MH0.WV-CLS9y0d88RBPwpK4NFIecR9Fckx5gvua3kJFa8baE3D8I4E2dCG6dgGm4Ss0shiPZfPA9sA9r-fvyhYVT2w\",\n    \"type\": \"Bearer \",\n    \"userId\": 7048,\n    \"loginUserEmail\": \"Team6@gmail.com\",\n    \"roles\": [\n        \"ROLE_ADMIN\"\n    ]\n}"
								}
							]
						}
					],
					"id": "0d86c0ff-8632-4dc5-b3f2-939fc95c45d2"
				},
				{
					"name": "Program",
					"item": [
						{
							"name": "Create Program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19b3e34a-e6c3-4eed-a7d9-37f037e93c69",
										"exec": [
											"let bodyData = pm.response.json();\r",
											"\r",
											"let programId = bodyData.programId;\r",
											"pm.environment.set(\"programID\", programId);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "3b75abb5-2231-47f4-a690-da33c5fc4b52",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"{{programDescription}}\",\r\n  \"programName\": \"{{programName}}\",\r\n  \"programStatus\": \"{{programStatus}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								}
							},
							"response": []
						}
					],
					"id": "033594b6-6cf7-4bde-8f6f-669a29e1c9e9"
				},
				{
					"name": "ProgramBatch",
					"item": [
						{
							"name": "Create Batch",
							"id": "ba8893c7-391f-4327-bd4e-d00ea2ef0604",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": []
							},
							"response": []
						}
					],
					"id": "24f616a3-db8f-4eea-a325-d4dbc667de4d"
				},
				{
					"name": "Class",
					"item": [],
					"id": "7c613a5e-f428-4864-a6ca-ac7d98d8dffa"
				},
				{
					"name": "ProgramBatchMapController",
					"item": [],
					"id": "2584b132-f1ec-43c3-b1cc-0531b72c8712"
				},
				{
					"name": "Delete",
					"item": [],
					"id": "c4d229ab-c475-42a5-bf83-8c8147d759b1"
				}
			],
			"id": "2d681516-d8a4-4a47-862f-baad286b9152"
		},
		{
			"name": "Negative Scenarios",
			"item": [
				{
					"name": "UserLogin",
					"item": [],
					"id": "afd0007e-2952-45aa-9186-17f0d5d53bfa"
				},
				{
					"name": "Program",
					"item": [],
					"id": "3547d223-6d4a-4df8-8382-a0fe48eb32b6"
				},
				{
					"name": "ProgramBatch",
					"item": [],
					"id": "701d3cbc-0cfb-4338-a12b-010cc965b42b"
				},
				{
					"name": "Class",
					"item": [],
					"id": "f6ac246f-1012-4eed-9342-63907e8eee92"
				},
				{
					"name": "ProgramBatchMapController",
					"item": [],
					"id": "45eb0dd9-6ba3-469d-98e1-7ff8c6b9586c"
				},
				{
					"name": "Delete",
					"item": [],
					"id": "06483a70-f0a4-4557-904b-5c79b2a66196"
				}
			],
			"id": "b7beb303-6401-4554-bee9-8c26bb657ec1"
		},
		{
			"name": "Logout",
			"item": [],
			"id": "108a4b5a-7b59-4f4a-a67d-4d61e421d84a"
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": {
			"token": "{{token}}"
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "d79ad2f9-658d-4a5d-98c3-be2fe89eef90",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"if(typeof pm.variables.get('requestData') !== 'object')\r",
					"{\r",
					"    pm.variables.set('requestData', pm.iterationData.toObject());\r",
					"}\r",
					"\r",
					"const requestData = pm.variables.get('requestData');\r",
					"\r",
					"if(typeof requestData != 'object' || Object.keys(requestData).length === 0)\r",
					"{\r",
					"    console.log('No external data provided/data set is empty');\r",
					"    return;\r",
					"}\r",
					"\r",
					"const currentRequest = requestData.requests.filter(({name}) => name === pm.info.requestName)[0];\r",
					"\r",
					"if(!currentRequest){\r",
					"    console.log('Request ${pm.info.requestName} has no data.');\r",
					"}\r",
					"\r",
					"if(currentRequest){\r",
					"\r",
					"    const variables = currentRequest.data.shift();\r",
					"\r",
					"    Object.entries(variables).forEach(([key, value]) => {\r",
					"        pm.variables.set(key, value);\r",
					"    });\r",
					"\r",
					"let baseUrl;\r",
					"\r",
					"if (variables.scenario.toLowerCase().includes(\"invalid baseurl\")) {\r",
					"    baseUrl = pm.environment.get(\"invalidBaseURL\");\r",
					"} else {  \r",
					"    baseUrl = pm.environment.get(\"baseURL\");\r",
					"}\r",
					"\r",
					"const endpoint = variables.endpoint; \r",
					"\r",
					"let fullURL;\r",
					"\r",
					"if ((pm.info.requestName=== \"Update Class\") || (pm.info.requestName=== \"Delete Class\")) {\r",
					"    const classId = pm.environment.get(\"classID\");\r",
					"    fullURL = baseUrl + endpoint.replace(\"{classId}\", classId);  \r",
					"} else {\r",
					"    fullURL = baseUrl + endpoint; \r",
					"}\r",
					"\r",
					"//pm.variables.set('url', fullURL); \r",
					"\r",
					"pm.request.url = fullURL;\r",
					"\r",
					"    if (variables.includeAuth.toLowerCase() === 'true') {\r",
					"        const token = pm.globals.get('token');  \r",
					"        pm.request.headers.add({ key: 'Authorization', value: `Bearer ${token}` });\r",
					"    } else {\r",
					"       console.log(\"No Authorization header needed\"); \r",
					"    }\r",
					"\r",
					"    pm.variables.set('requestData', requestData);\r",
					"\r",
					"    if(currentRequest.data.length > 0){\r",
					"        pm.execution.setNextRequest(pm.info.requestName);\r",
					"    }\r",
					"}\t\t\r",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "8e145411-b979-492b-bd3a-552b1f195f28",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"var commonUtils=()=>{\r",
					"function setTokenFromResponse() {\r",
					"    let bodyData = pm.response.json();\r",
					"\r",
					"    let token = bodyData.token;\r",
					"    if (token) {\r",
					"        console.log(\"Token -\" + token);\r",
					"        pm.globals.set(\"token\", token);\r",
					"    } else {\r",
					"        console.log(\"Token not found in response\");\r",
					"    }\r",
					"}\r",
					"\r",
					"function checkKeyIsNumber(key){debugger;\r",
					"pm.test(`Verify ${key} is a number`, function () {\r",
					"        let bodyData = pm.response.json();\r",
					"        \r",
					"        pm.expect(bodyData).to.have.property(key);\r",
					"        pm.expect(bodyData[key]).to.be.a('number');\r",
					"    });\r",
					"}\r",
					"\r",
					"function getResponseText(responseTxt){\r",
					"    pm.test(responseTxt, function () {\r",
					"        pm.expect(pm.response.text()).to.include(responseTxt);\r",
					"    });\r",
					"}\r",
					"\r",
					"function checkStatusLine(expectedStatusCode, expectedStatusMessage) {\r",
					"    pm.test(`Status line is ${expectedStatusCode} ${expectedStatusMessage}`, function () {\r",
					"        let actualStatusCode = pm.response.code;\r",
					"        let actualStatusMessage = pm.response.status;\r",
					"\r",
					"        pm.expect(actualStatusCode).to.eql(expectedStatusCode);\r",
					"        pm.expect(actualStatusMessage).to.eql(expectedStatusMessage);\r",
					"    });\r",
					"}\r",
					"\r",
					"function getStatusCode(statusCode){\r",
					"    pm.test(`Status code is ${statusCode}`, function () {\r",
					"        pm.response.to.have.status(statusCode);\r",
					"    });\r",
					"}\r",
					"\r",
					"var jsonData = pm.response.json();\r",
					"function getErrorMessage(errorCode, errorMessage){\r",
					"   pm.test(`Check error code is: ${jsonData.errorCode} &  error message is: ${jsonData.errorMessage}`, function () {    \r",
					"    // console.log(\"Error Code:\", jsonData.errorCode);\r",
					"    pm.expect(jsonData.errorCode).to.eql(errorCode);\r",
					"    pm.expect(jsonData.errorMessage).to.eql(errorMessage);\r",
					"});\r",
					"}\r",
					"\r",
					"\r",
					"function responseHeaderCheck(){\r",
					"    pm.test(\"Response Header Content-Type is application/json\", function () {\r",
					"        pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
					"    });\r",
					"}\r",
					"\r",
					"function checkResponseHasBody(){\r",
					"     pm.test(\"Verify Response has Body or not\", function(){\r",
					"    pm.response.to.be.withBody;\r",
					"     });\r",
					"}\r",
					"\r",
					"function checkResponseBodyAsJson(){\r",
					"    pm.test(\"Verify Response Body as JSON\", function(){\r",
					"    pm.response.to.be.json;\r",
					"    // pm.response.to.have.body({key:value});\r",
					"    });\r",
					"}\r",
					"\r",
					"function responseTimeTook(){\r",
					"pm.test(\"Response time is less than 500ms\", function () {\r",
					"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
					"});\r",
					"}\r",
					"\r",
					"function verifyStatusCode(){\r",
					"    let expecStatusCode = pm.iterationData.get(\"statusCode\");\r",
					"let actualStatusCode = pm.response.code;\r",
					"console.log(\"Expected Status Code: \", expecStatusCode); \r",
					"console.log(\"Actual Status Code: \", actualStatusCode);\r",
					"\r",
					"pm.test(\"Status code is as expected\", function () {\r",
					"    pm.expect(actualStatusCode).to.eql(parseInt(expecStatusCode, 10));\r",
					"});\r",
					"}\r",
					"\r",
					"function verifyErrorMessage(){\r",
					"    let expecErrorMessage = pm.iterationData.get(\"ErrorMessage\");\r",
					"let actualErrorMessage = pm.response.text();\r",
					"console.log(\"Expected Error Message: \", expecErrorMessage);\r",
					"console.log(\"Actual Error Code: \", actualErrorMessage);\r",
					"pm.test(\"Check Error Message\", function () {\r",
					"    pm.expect(actualErrorMessage).to.include(expecErrorMessage);\r",
					"});\r",
					"}\r",
					"\r",
					"\r",
					"function createDieticianSchemaValidation(){\r",
					"    //Schema Validation\r",
					"const schema={\r",
					"  \"type\": \"object\",\r",
					"  \"properties\": {\r",
					"    \"id\": { \"type\": \"number\" },\r",
					"    \"loginPassword\": { \"type\": \"string\" },\r",
					"    \"Firstname\": { \"type\": \"string\" },\r",
					"    \"Lastname\": { \"type\": \"string\" },\r",
					"    \"ContactNumber\": {\"type\": \"string\"},\r",
					"    \"DateOfBirth\": { \"type\": \"string\"},\r",
					"    \"Email\": { \"type\": \"string\" },\r",
					"    \"HospitalName\":{\"type\": \"string\"},\r",
					"    \"HospitalStreet\": {\"type\": \"string\"},\r",
					"    \"HospitalCity\": {\"type\": \"string\"},\r",
					"    \"HospitalPincode\":{ \"type\": \"string\"},\r",
					"    \"Education\":{ \"type\": \"string\"}\r",
					"  },\r",
					"  \"required\": [\"id\", \"loginPassword\", \"Firstname\", \"Lastname\", \"ContactNumber\", \"DateOfBirth\", \"Email\",\"HospitalName\", \"HospitalStreet\", \"HospitalCity\", \"HospitalPincode\", \"Education\" ]\r",
					"}\r",
					"\r",
					"pm.test(\"Dietician Schema Validation - Response contain valid response data\", () => {\r",
					"    pm.response.to.have.jsonSchema(schema);\r",
					"});\r",
					"}\r",
					"\r",
					"function userLoginSchemaValidation(){\r",
					"    const schema={\r",
					"  \"type\": \"object\",\r",
					"  \"properties\": {\r",
					"    \"token\": { \"type\": \"string\" },\r",
					"    \"type\": { \"type\": \"string\" },\r",
					"    \"userId\": { \"type\": \"number\" },\r",
					"    \"loginUserEmail\": { \"type\": \"string\" },\r",
					"    \"roles\": { \"type\": \"array\" }\r",
					"  },\r",
					"  \"required\": [\"token\", \"type\", \"userId\", \"loginUserEmail\", \"roles\"]\r",
					"}\r",
					"\r",
					"pm.test(\"Schema - Validation Response contain valid response data - schema validation\", () => {\r",
					"    pm.response.to.have.jsonSchema(schema);\r",
					"});\r",
					"\r",
					"}\r",
					"\r",
					"module.exports = { \r",
					"    \r",
					"    setTokenFromResponse,\r",
					"    checkKeyIsNumber,\r",
					"    getResponseText,\r",
					"    checkStatusLine,\r",
					"    getStatusCode,\r",
					"    responseHeaderCheck,\r",
					"    checkResponseHasBody,\r",
					"    checkResponseBodyAsJson,\r",
					"    responseTimeTook,\r",
					"    getErrorMessage,\r",
					"    verifyStatusCode,\r",
					"    verifyErrorMessage,\r",
					"    userLoginSchemaValidation,\r",
					"    createDieticianSchemaValidation,\r",
					"\r",
					"}\r",
					"}\r",
					"pm.collectionVariables.get(\"variable_key\");"
				]
			}
		}
	]
}