{
	"info": {
		"_postman_id": "0cf68f95-b2cd-49d2-af4f-c0e6a5c312b0",
		"name": "Team2_API Commandos",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "UserLogin",
			"item": [
				{
					"name": "User Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ae8d7c71-2e67-4086-a1c3-8d097bb3f7c6",
								"exec": [
									"\r",
									"let bodyData = pm.response.json();\r",
									"\r",
									"let token = bodyData.token;\r",
									"pm.globals.set(\"token\", token);\r",
									"\r",
									"pm.test('Verify user signed in', () => {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.token).to.eql(pm.globals.get('token'));\r",
									"});\r",
									"\r",
									"pm.test(`Verify userId is a number`, function () {\r",
									"        let bodyData = pm.response.json();\r",
									"        let key = 'userId';\r",
									"        pm.expect(bodyData).to.have.property(key);\r",
									"        pm.expect(bodyData[key]).to.be.a('number');\r",
									"    });\r",
									"\r",
									"pm.test('Verify Role is - ROLE_ADMIN', function () {\r",
									"        pm.expect(pm.response.text()).to.include('ROLE_ADMIN');\r",
									"    });\r",
									"\r",
									"pm.test(`Status code is 200`, function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"pm.test(\"Response Header Content-Type is application/json\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Verify Response has Body or not\", function(){\r",
									"    pm.response.to.be.withBody;\r",
									"     }); \r",
									"\r",
									"pm.test(\"Verify Response Body as JSON\", function(){\r",
									"    pm.response.to.be.json;\r",
									"    // pm.response.to.have.body({key:value});\r",
									"    });   \r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"//Schema Validation\r",
									"const schema={\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"token\": { \"type\": \"string\" },\r",
									"    \"type\": { \"type\": \"string\" },\r",
									"    \"userId\": { \"type\": \"number\" },\r",
									"    \"loginUserEmail\": { \"type\": \"string\" },\r",
									"    \"roles\": { \"type\": \"array\" }\r",
									"  },\r",
									"  \"required\": [\"token\", \"type\", \"userId\", \"loginUserEmail\", \"roles\"]\r",
									"}\r",
									"\r",
									"pm.test(\"Schema - Validation Response contain valid response data - schema validation\", () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"// function getAdminToken(){\r",
									"//     bodyData = pm.response.json();\r",
									"//     TokenValue = bodyData.token;\r",
									"//     console.log(\"Token: \" + TokenValue);\r",
									"//     return TokenValue;\r",
									"// }\r",
									"// pm.collectionVariables.set(\"adminToken\", getAdminToken());\r",
									"//Validation\r",
									"\r",
									"\r",
									"// PostmanLegacy.setNextRequest('Create New Dietician');\r",
									"// pm.execution.setNextRequest('Create New Dietician Copy');\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e2cc25f0-8b69-4f7b-a56c-0ccb258faf19",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "2af1a399-1a77-4aa1-9c53-e250bee31000",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"userLoginEmailId\": \"{{userLoginEmailId}}\",\n\"password\":\"{{password}}\"\n}\n\n\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": ""
					},
					"response": [
						{
							"id": "41671c13-bd89-407c-9144-712272690f22",
							"name": "admin Login",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"password\": \"test\",\n  \"userLoginEmail\": \"Team6@gmail.com\"\n}\n\n\n\n\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/login",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"login"
									],
									"query": [
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1723106690&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=FCpchhkOvdlJSaQgPHC9O0KzTAvdwpW9fRgna1VvGQg%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1723106690&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=FCpchhkOvdlJSaQgPHC9O0KzTAvdwpW9fRgna1VvGQg%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 08 Aug 2024 08:44:50 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"token\": \"eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJUZWFtNkBnbWFpbC5jb20iLCJpYXQiOjE3MjMxMDY2OTAsImV4cCI6MTcyMzEzNTQ5MH0.WV-CLS9y0d88RBPwpK4NFIecR9Fckx5gvua3kJFa8baE3D8I4E2dCG6dgGm4Ss0shiPZfPA9sA9r-fvyhYVT2w\",\n    \"type\": \"Bearer \",\n    \"userId\": 7048,\n    \"loginUserEmail\": \"Team6@gmail.com\",\n    \"roles\": [\n        \"ROLE_ADMIN\"\n    ]\n}"
						}
					]
				}
			],
			"id": "0d86c0ff-8632-4dc5-b3f2-939fc95c45d2"
		},
		{
			"name": "Program",
			"item": [
				{
					"name": "Create Program",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "19b3e34a-e6c3-4eed-a7d9-37f037e93c69",
								"exec": [
									"let bodyData = pm.response.json();\r",
									"\r",
									"let programId = bodyData.programId;\r",
									"pm.environment.set(\"programID\", programId);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "3b75abb5-2231-47f4-a690-da33c5fc4b52",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"{{programDescription}}\",\r\n  \"programName\": \"{{programName}}\",\r\n  \"programStatus\": \"{{programStatus}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						}
					},
					"response": []
				}
			],
			"id": "033594b6-6cf7-4bde-8f6f-669a29e1c9e9"
		},
		{
			"name": "ProgramBatch",
			"item": [
				{
					"name": "Create Batch",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9bcb3106-ba79-4784-9848-52fcdca2bb7f",
								"exec": [
									"let bodyData = pm.response.json();\r",
									"\r",
									"let batchId = bodyData.batchId;\r",
									"let batchName = bodyData.batchName;\r",
									"\r",
									"//To add the batch ids to an array\r",
									"var batchIDs = pm.collectionVariables.get(\"batchIDs\");\r",
									"    if (!batchIDs) {\r",
									"        batchIDs = [];\r",
									"    } else {\r",
									"        batchIDs = JSON.parse(batchIDs);\r",
									"    }\r",
									"    \r",
									"    //Storing the batchIds as local variable to use in consecutive operations\r",
									"    if (batchIDs.length === 0) {\r",
									"        pm.collectionVariables.set(\"batchID1\", batchId);\r",
									"        pm.collectionVariables.set(\"batchName1\", batchName); \r",
									"        console.log(\"batchID1:\" +batchId);\r",
									"    } else if (batchIDs.length === 1) {\r",
									"        //let batchID2 = batchId;\r",
									"        pm.collectionVariables.set(\"batchID2\", batchId);\r",
									"        pm.collectionVariables.set(\"batchName2\", batchName); \r",
									"        console.log(\"batchID2:\" +batchId);\r",
									"    }\r",
									"    \r",
									"    batchIDs.push(batchId);    \r",
									"    pm.collectionVariables.set(\"batchIDs\", JSON.stringify(batchIDs));\r",
									"\r",
									"//To add the batch names to an array\r",
									"var batchNames = pm.collectionVariables.get(\"batchNames\");\r",
									"    if (!batchNames) {\r",
									"        batchNames = [];\r",
									"    } else {\r",
									"        batchNames = JSON.parse(batchNames);\r",
									"    }\r",
									"    \r",
									"    batchNames.push(batchName);    \r",
									"    pm.collectionVariables.set(\"batchNames\", JSON.stringify(batchNames));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "ba8893c7-391f-4327-bd4e-d00ea2ef0604",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\": {{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": {{programId}},\r\n\"programName\": \"{{programName}}\"\r\n\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						}
					},
					"response": []
				}
			],
			"id": "24f616a3-db8f-4eea-a325-d4dbc667de4d"
		},
		{
			"name": "Class",
			"item": [
				{
					"name": "Create Class",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dd6bbdad-382f-4e14-b69e-588b4d34a121",
								"exec": [
									"const expectedStatusCode = pm.variables.get(\"expectedStatusCode\");\r",
									"const expectedStatusMessage = pm.variables.get(\"expectedStatusMessage\");\r",
									"const expectedResponseMessage = pm.variables.get(\"expectedResponseMessage\");\r",
									"const expectedResponseStatus = pm.variables.get(\"expectedResponseStatus\");\r",
									"const classComments = pm.variables.get(\"classComments\");\r",
									"const classDate = pm.variables.get(\"classDate\");\r",
									"const classDescription = pm.variables.get(\"classDescription\");\r",
									"const classNo = pm.variables.get(\"classNo\");\r",
									"const classNotes = pm.variables.get(\"classNotes\");\r",
									"const classRecordingPath = pm.variables.get(\"classRecordingPath\");\r",
									"const classStaffId = pm.variables.get(\"classStaffId\");\r",
									"const classStatus = pm.variables.get(\"classStatus\");\r",
									"const classTopic = pm.variables.get(\"classTopic\");\r",
									"const batchId = pm.collectionVariables.get(\"batchID1\");\r",
									"const batchName = pm.collectionVariables.get(\"batchName1\");\r",
									"const scenario = pm.variables.get(\"scenario\");\r",
									"\r",
									"console.log(\"Scenario: \"+ scenario);\r",
									"\r",
									"//To store all the class ids created by positive and negative scenarios, into an array for data cleanup\r",
									"if (pm.response.status=== 201) {\r",
									"    let bodyData = pm.response.json();\r",
									"    let classId = bodyData.csId;\r",
									"    var classIDs = pm.collectionVariables.get(\"classIDs\");\r",
									"    if (!classIDs) {\r",
									"        classIDs = [];\r",
									"    } else {\r",
									"        classIDs = JSON.parse(classIDs);\r",
									"    }\r",
									"    classIDs.push(classId);    \r",
									"    pm.collectionVariables.set(\"classIDs\", JSON.stringify(classIDs));\r",
									"\r",
									"    if (classIDs.length === 0) {\r",
									"        pm.collectionVariables.set(\"classID1\", classId);\r",
									"        console.log(\"classID1:\" +classId);\r",
									"    }\r",
									"}\r",
									"\r",
									"if ((scenario === \"create class with all fields\") || (scenario === \"create class with only mandatory fields\")) {\r",
									"   /* try {\r",
									"    let bodyData = pm.response.json();\r",
									"    let classId = bodyData.csId;\r",
									"    pm.collectionVariables.set(\"classID\", classId);\r",
									"    } catch (error) {\r",
									"        console.error(\"Class is not created due to an error:\", error);  \r",
									"    } */\r",
									"    commonTests.checkStatusLine(expectedStatusCode, expectedStatusMessage);\r",
									"    commonTests.checkResponseTime();\r",
									"    commonTests.checkResponseHeader();\r",
									"    commonTests.checkResponseHasBody(); \r",
									"    commonTests.ClassDataValidation(batchId, classComments, classDate, classDescription, classNo, classNotes, classRecordingPath, classStaffId, classStatus, classTopic, batchName);\r",
									"    commonTests.classPostPutSchemaValidation(); \r",
									"\r",
									"} else if ((scenario === \"create class without authorization\") || (scenario === \"create class with invalid baseURL\") || (scenario === \"create class with invalid endpoint\")) {\r",
									"        commonTests.checkStatusLine(expectedStatusCode, expectedStatusMessage);\r",
									"        commonTests.checkResponseTime();        \r",
									"} else {\r",
									"    commonTests.checkStatusLine(expectedStatusCode, expectedStatusMessage);\r",
									"    commonTests.checkResponseTime();\r",
									"    commonTests.checkResponseHeader();\r",
									"    commonTests.checkResponseHasBody();\r",
									"    commonTests.checkErrorMessage(expectedResponseMessage, expectedResponseStatus);    \r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "ad679ab6-f5ec-43ba-923c-7fd60b6d4fc9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchId\": {{batchId}},  \r\n  \"classComments\": \"{{classComments}}\",\r\n  \"classDate\": \"{{classDate}}\",\r\n  \"classDescription\": \"{{classDescription}}\",\r\n  \"classNo\": {{classNo}},\r\n  \"classNotes\": \"{{classNotes}}\",\r\n  \"classRecordingPath\": \"{{classRecordingPath}}\",\r\n  \"classStaffId\": \"{{classStaffId}}\",\r\n  \"classStatus\": \"{{classStatus}}\",\r\n  \"classTopic\": \"{{classTopic}}\",\r\n   \"classScheduledDates\": [\r\n    \"{{classScheduledDates_1}}\",\r\n    \"{{classScheduledDates_2}}\"\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						}
					},
					"response": []
				},
				{
					"name": "Update Class",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2fc5c488-d7b7-4ff7-97d5-f93dea1ae5c4",
								"exec": [
									"const expectedStatusCode = pm.variables.get(\"expectedStatusCode\");\r",
									"const expectedStatusMessage = pm.variables.get(\"expectedStatusMessage\");\r",
									"const expectedResponseMessage = pm.variables.get(\"expectedResponseMessage\");\r",
									"const expectedResponseStatus = pm.variables.get(\"expectedResponseStatus\");\r",
									"const classComments = pm.variables.get(\"classComments\");\r",
									"const classDate = pm.variables.get(\"classDate\");\r",
									"const classDescription = pm.variables.get(\"classDescription\");\r",
									"const classNo = pm.variables.get(\"classNo\");\r",
									"const classNotes = pm.variables.get(\"classNotes\");\r",
									"const classRecordingPath = pm.variables.get(\"classRecordingPath\");\r",
									"const classStaffId = pm.variables.get(\"classStaffId\");\r",
									"const classStatus = pm.variables.get(\"classStatus\");\r",
									"const classTopic = pm.variables.get(\"classTopic\");\r",
									"const batchId = pm.collectionVariables.get(\"batchID1\");\r",
									"const batchName = pm.collectionVariables.get(\"batchName1\");\r",
									"const classID = pm.collectionVariables.get(\"classID1\");\r",
									"const scenario = pm.variables.get(\"scenario\");\r",
									"const batchId2 = pm.collectionVariables.get(\"batchID2\");\r",
									"\r",
									"\r",
									"console.log(\"Scenario: \"+ scenario);\r",
									"\r",
									"if ((scenario === \"update class with all fields\") || (scenario === \"update class with only mandatory fields\")) {\r",
									"    commonTests.checkStatusLine(expectedStatusCode, expectedStatusMessage);\r",
									"    commonTests.checkResponseTime();\r",
									"    commonTests.checkResponseHeader();\r",
									"    commonTests.checkResponseHasBody(); \r",
									"    commonTests.ClassDataValidation(batchId, classComments, classDate, classDescription, classNo, classNotes, classRecordingPath, classStaffId, classStatus, classTopic, batchName);\r",
									"    commonTests.classPostPutSchemaValidation(); \r",
									"\r",
									"} else if ((scenario === \"update class without authorization\") || (scenario === \"update class with invalid baseURL\") || (scenario === \"update class with invalid endpoint\")) {\r",
									"    commonTests.checkStatusLine(expectedStatusCode, expectedStatusMessage);\r",
									"    commonTests.checkResponseTime();        \r",
									"} else {\r",
									"    commonTests.checkStatusLine(expectedStatusCode, expectedStatusMessage);\r",
									"    commonTests.checkResponseTime();\r",
									"    commonTests.checkResponseHeader();\r",
									"    commonTests.checkResponseHasBody();\r",
									"      if (scenario === \"update class with new batchId\") {\r",
									"            let dynamicExpectedResponseMessage = expectedResponseMessage.replace(\"{classID1}\", classID)\r",
									"                .replace(\"{batchID2}\", batchId2);\r",
									"            commonTests.checkErrorMessage(dynamicExpectedResponseMessage, expectedResponseStatus);\r",
									"   \r",
									"        } else {\r",
									"            commonTests.checkErrorMessage(expectedResponseMessage, expectedResponseStatus);\r",
									"        }\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "d2bcf3c5-d7a1-47be-a1b9-6e402c1f4fcf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"batchId\": {{batchId}},\r\n    \"classNo\": {{classNo}},\r\n    \"classDate\": \"{{classDate}}\",\r\n    \"classTopic\": \"{{classTopic}}\",\r\n    \"classStatus\": \"{{classStatus}}\",\r\n    \"classStaffId\": \"{{classStaffId}}\",\r\n    \"classDescription\": \"{{classDescription}}\",\r\n    \"classComments\": \"{{classComments}}\",\r\n    \"classNotes\": \"{{classNotes}}\",\r\n    \"classRecordingPath\": \"{{classRecordingPath}}\",\r\n    \"classScheduledDates\": [\r\n    \"{{classScheduledDates_1}}\",\r\n    \"{{classScheduledDates_2}}\"\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						}
					},
					"response": []
				},
				{
					"name": "Update Class Recording Path",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c925de78-530b-46eb-a91f-b1661ddebbaf",
								"exec": [
									"const expectedStatusCode = pm.variables.get(\"expectedStatusCode\");\r",
									"const expectedStatusMessage = pm.variables.get(\"expectedStatusMessage\");\r",
									"const expectedResponseMessage = pm.variables.get(\"expectedResponseMessage\");\r",
									"const expectedResponseStatus = pm.variables.get(\"expectedResponseStatus\");\r",
									"const classRecordingPath = pm.variables.get(\"classRecordingPath\");\r",
									"const classID = pm.collectionVariables.get(\"classID\");\r",
									"const scenario = pm.variables.get(\"scenario\");\r",
									"\r",
									"console.log(\"Scenario: \"+ scenario);\r",
									"\r",
									"if ((scenario === \"update class recordings with valid data\") || (scenario === \"update class recordings without classRecordingPath field\")) {\r",
									"    commonTests.checkStatusLine(expectedStatusCode, expectedStatusMessage);\r",
									"    commonTests.checkResponseTime();\r",
									"    commonTests.checkResponseHeader();\r",
									"    commonTests.checkResponseHasBody(); \r",
									"    commonTests.classRecPathDataValidation(classID, classRecordingPath);\r",
									"    commonTests.classPostPutSchemaValidation(); \r",
									"\r",
									"} else if ((scenario === \"update class recordings without authorization\") || (scenario === \"update class recordings with invalid baseURL\") || (scenario === \"update class recordings with invalid endpoint\")) {\r",
									"    commonTests.checkStatusLine(expectedStatusCode, expectedStatusMessage);\r",
									"    commonTests.checkResponseTime();        \r",
									"} else {\r",
									"    commonTests.checkStatusLine(expectedStatusCode, expectedStatusMessage);\r",
									"    commonTests.checkResponseTime();\r",
									"    commonTests.checkResponseHeader();\r",
									"    commonTests.checkResponseHasBody();     \r",
									"    commonTests.checkErrorMessage(expectedResponseMessage, expectedResponseStatus);        \r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "d0fd92d3-2594-4c83-a3e3-3ffcdf7bd2bb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"classRecordingPath\": \"{{classRecordingPath}}\",\r\n  \"csId\": {{classID}}\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						}
					},
					"response": []
				},
				{
					"name": "Delete Class Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2ef1910f-a81c-4671-a381-0df8785b11c9",
								"exec": [
									"const expectedStatusCode = pm.variables.get(\"expectedStatusCode\");\r",
									"const expectedStatusMessage = pm.variables.get(\"expectedStatusMessage\");\r",
									"const expectedResponseMessage = pm.variables.get(\"expectedResponseMessage\");\r",
									"const expectedResponseStatus = pm.variables.get(\"expectedResponseStatus\");\r",
									"const classID = pm.collectionVariables.get(\"classID1\");\r",
									"const scenario = pm.variables.get(\"scenario\");\r",
									"\r",
									"console.log(\"Scenario: \"+ scenario);\r",
									"\r",
									"if (scenario === \"delete class by non-existing classId\") {\r",
									"    commonTests.checkStatusLine(expectedStatusCode, expectedStatusMessage);\r",
									"    commonTests.checkResponseTime();\r",
									"    commonTests.checkResponseHeader();\r",
									"    commonTests.checkResponseHasBody();\r",
									"    commonTests.checkErrorMessage(expectedResponseMessage, expectedResponseStatus);\r",
									" \r",
									"} else {\r",
									"    commonTests.checkStatusLine(expectedStatusCode, expectedStatusMessage);\r",
									"    commonTests.checkResponseTime();        \r",
									"} \r",
									"\r",
									"pm.collectionVariables.unset(\"batchIDs\");\r",
									"pm.collectionVariables.unset(\"batchNames\");\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "2221e166-2371-4cb2-918c-22212aa8ebc4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": []
					},
					"response": []
				},
				{
					"name": "Delete Class",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0e6d8199-780a-4b34-b509-9743f2616224",
								"exec": [
									"const expectedStatusCode = pm.variables.get(\"expectedStatusCode\");\r",
									"const expectedStatusMessage = pm.variables.get(\"expectedStatusMessage\");\r",
									"const expectedResponseMessage = pm.variables.get(\"expectedResponseMessage\");\r",
									"const expectedResponseStatus = pm.variables.get(\"expectedResponseStatus\");\r",
									"const classID = pm.collectionVariables.get(\"classID1\");\r",
									"const scenario = pm.variables.get(\"scenario\");\r",
									"\r",
									"console.log(\"Scenario: \"+ scenario);\r",
									"\r",
									"commonTests.checkStatusLine(expectedStatusCode, expectedStatusMessage);\r",
									"commonTests.checkResponseTime();\r",
									"commonTests.checkResponseHeader();\r",
									"commonTests.checkResponseHasBody();\r",
									"\r",
									"let dynamicExpectedResponseMessage = expectedResponseMessage.replace(\"{classID}\", classID);\r",
									"commonTests.checkErrorMessage(dynamicExpectedResponseMessage, expectedResponseStatus);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "9612174e-8525-42e5-8d6b-f6d07e17dc67",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": []
					},
					"response": []
				},
				{
					"name": "Get all Class List",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4c246379-2651-47d1-9550-9bb6118f5a59",
								"exec": [
									"const expectedStatusCode = pm.variables.get(\"expectedStatusCode\");\r",
									"const expectedStatusMessage = pm.variables.get(\"expectedStatusMessage\");\r",
									"const scenario = pm.variables.get(\"scenario\");\r",
									"\r",
									"console.log(\"Scenario: \"+ scenario);\r",
									"\r",
									"if (scenario === \"get all class list positive\") {\r",
									"commonTests.checkStatusLine(expectedStatusCode, expectedStatusMessage);\r",
									"commonTests.checkResponseTime();\r",
									"commonTests.checkResponseHeader();\r",
									"commonTests.checkResponseHasBody();\r",
									"commonTests.checkResponseBodyAsJson();\r",
									"} else {\r",
									"    commonTests.checkStatusLine(expectedStatusCode, expectedStatusMessage);\r",
									"    commonTests.checkResponseTime();    \r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "07c9308f-fb50-4bea-a184-0e3e96076ed1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": []
					},
					"response": []
				},
				{
					"name": "Get Class Recordings by BatchId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3b692af5-a938-43b8-84b5-10287901aa43",
								"exec": [
									"const expectedStatusCode = pm.variables.get(\"expectedStatusCode\");\r",
									"const expectedStatusMessage = pm.variables.get(\"expectedStatusMessage\");\r",
									"const expectedResponseMessage = pm.variables.get(\"expectedResponseMessage\");\r",
									"const expectedResponseStatus = pm.variables.get(\"expectedResponseStatus\");\r",
									"const scenario = pm.variables.get(\"scenario\");\r",
									"\r",
									"console.log(\"Scenario: \"+ scenario);\r",
									"\r",
									"if (scenario === \"get class recordings by valid BatchId\") {\r",
									"commonTests.checkStatusLine(expectedStatusCode, expectedStatusMessage);\r",
									"commonTests.checkResponseTime();\r",
									"commonTests.checkResponseHeader();\r",
									"commonTests.checkResponseHasBody();\r",
									"commonTests.checkResponseBodyAsJson();\r",
									"\r",
									"    pm.test(\"Data validations in the response body\", () => {\r",
									"        const classIDs = JSON.parse(pm.collectionVariables.get(\"classIDs\"));\r",
									"        const responseBody = pm.response.json();\r",
									"\r",
									"        responseBody.forEach(item => {\r",
									"            pm.expect(classIDs).to.include(item.csId);\r",
									"        });\r",
									"    });\r",
									"} else {\r",
									"    commonTests.checkStatusLine(expectedStatusCode, expectedStatusMessage);\r",
									"    commonTests.checkResponseTime();    \r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "ef1bf340-2951-4082-b14e-b3b378715efb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				},
				{
					"name": "Get Class details by Id",
					"id": "8cb9404e-f31e-4428-b0e4-1fb3dfcfe091",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				},
				{
					"name": "Get all Classes by Class Topic",
					"id": "4792cd77-b3a8-44de-840a-8ccf9e64752f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				},
				{
					"name": "Get all Classes by BatchId",
					"id": "9a8c9442-c0ba-4616-8e4a-771a9181bfc7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				},
				{
					"name": "Get all Classes by StaffId",
					"id": "06f88ca6-38dd-4b1d-b209-59b0431d3b6c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				},
				{
					"name": "Get all recordings",
					"id": "afc03b0b-9f20-4df1-b289-abdd82c3d948",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				},
				{
					"name": "Get Class Recordings by Class Id",
					"id": "10edf32d-fd90-45d5-a154-d85e2ba8d6e7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				},
				{
					"name": "Get all Upcoming Classes for particular Student",
					"id": "0db4dcb3-2013-452c-b0d9-69984089d83c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				},
				{
					"name": "Get Class Recordings Download by Class Id",
					"id": "5db8054b-d804-4177-bb9c-548bf80c1be8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				}
			],
			"id": "7c613a5e-f428-4864-a6ca-ac7d98d8dffa"
		},
		{
			"name": "ProgramBatchMapController",
			"item": [],
			"id": "2584b132-f1ec-43c3-b1cc-0531b72c8712"
		},
		{
			"name": "Delete",
			"item": [],
			"id": "c4d229ab-c475-42a5-bf83-8c8147d759b1"
		},
		{
			"name": "Logout",
			"item": [],
			"id": "108a4b5a-7b59-4f4a-a67d-4d61e421d84a"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "ccabd18b-2748-4faa-9330-40e9df32c2fe",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"if(typeof pm.variables.get('requestData') !== 'object')\r",
					"{\r",
					"    pm.variables.set('requestData', pm.iterationData.toObject());\r",
					"}\r",
					"\r",
					"const requestData = pm.variables.get('requestData');\r",
					"\r",
					"if(typeof requestData != 'object' || Object.keys(requestData).length === 0)\r",
					"{\r",
					"    console.log('No external data provided/data set is empty');\r",
					"    return;\r",
					"}\r",
					"\r",
					"const currentRequest = requestData.requests.filter(({name}) => name === pm.info.requestName)[0];\r",
					"\r",
					"if(!currentRequest){\r",
					"    console.log('Request ${pm.info.requestName} has no data.');\r",
					"}\r",
					"\r",
					"if(currentRequest){\r",
					"\r",
					"    const variables = currentRequest.data.shift();\r",
					"\r",
					"    Object.entries(variables).forEach(([key, value]) => {\r",
					"        pm.variables.set(key, value);\r",
					"    });\r",
					"\r",
					"    let baseUrl;\r",
					"\r",
					"    if (variables.scenario.toLowerCase().includes(\"invalid baseurl\")) {\r",
					"        baseUrl = pm.environment.get(\"invalidBaseURL\");\r",
					"    } else {  \r",
					"        baseUrl = pm.environment.get(\"baseURL\");\r",
					"    }\r",
					"\r",
					"    const endpoint = variables.endpoint; \r",
					"\r",
					"    let fullURL = baseUrl + endpoint; \r",
					"\r",
					"    pm.request.url = fullURL;\r",
					"\r",
					"    if (variables.includeAuth.toLowerCase() === 'true') {\r",
					"        const token = pm.globals.get('token');  \r",
					"        pm.request.headers.add({ key: 'Authorization', value: `Bearer ${token}` });\r",
					"    } else {\r",
					"       console.log(\"No Authorization header needed\"); \r",
					"    }\r",
					"\r",
					"    pm.variables.set('requestData', requestData);\r",
					"\r",
					"    if(currentRequest.data.length > 0){\r",
					"       pm.execution.setNextRequest(pm.info.requestName);\r",
					"    }\r",
					"}\t\t"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "3987aaf1-2431-48a5-811c-2e4f80c1fd68",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"commonTests = {\r",
					"    checkStatusLine: function(expectedStatusCode, expectedStatusMessage) {\r",
					"        pm.test(`Status code is ${expectedStatusCode}`, () => {\r",
					"            pm.response.to.have.status(expectedStatusCode);  \r",
					"        });\r",
					"        pm.test(`Status message is '${expectedStatusMessage}'`, () => {\r",
					"            pm.response.to.have.status(expectedStatusMessage);\r",
					"        });        \r",
					"    },\r",
					"\r",
					"    checkResponseHeader: function() {\r",
					"        pm.test(\"Response Header Content-Type is application/json\", function () {\r",
					"            pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
					"        });\r",
					"    },\r",
					"\r",
					"    checkResponseHasBody: function() {\r",
					"        pm.test(\"Verify Response has Body or not\", function(){\r",
					"            pm.response.to.be.withBody;\r",
					"        });\r",
					"    },\r",
					"\r",
					"    checkResponseBodyAsJson: function() {\r",
					"        pm.test(\"Verify Response Body as JSON\", function(){\r",
					"            pm.response.to.be.json;\r",
					"        });\r",
					"    },\r",
					"\r",
					"    checkResponseTime: function() {\r",
					"        pm.test(\"Response time is less than 500ms\", function () {\r",
					"            pm.expect(pm.response.responseTime).to.be.below(500);\r",
					"        });\r",
					"    },\r",
					"    \r",
					"    checkErrorMessage: function(expectedResponseMessage, expectedResponseStatus) {      \r",
					"        pm.test(\"Check if error message matches expected\", function () {\r",
					"        pm.expect(pm.response.json().message).to.eql(expectedResponseMessage); \r",
					"        });\r",
					"\r",
					"        pm.test(\"Check if response status is as expected\", function () {\r",
					"        pm.expect(pm.response.json().success).to.eql(expectedResponseStatus); \r",
					"        });\r",
					"    },\r",
					"\r",
					"    ClassDataValidation: function (batchId, classComments, classDate, classDescription, classNo, classNotes, classRecordingPath, classStaffId, classStatus, classTopic, batchName) {\r",
					"        pm.test(\"Data validations in the response body\", () => {\r",
					"            pm.expect(pm.response.json().csId).is.not.null;\r",
					"            pm.expect(pm.response.json().batchId).to.be.equal(batchId);\r",
					"            pm.expect(pm.response.json().classComments).to.be.equal(classComments);\r",
					"            pm.expect(pm.response.json().classDate).to.be.equal(classDate);\r",
					"            pm.expect(pm.response.json().classDescription).to.be.equal(classDescription);\r",
					"            pm.expect(pm.response.json().classNo).to.be.equal(classNo);\r",
					"            pm.expect(pm.response.json().classNotes).to.be.equal(classNotes);\r",
					"            pm.expect(pm.response.json().classRecordingPath).to.be.equal(classRecordingPath);\r",
					"            pm.expect(pm.response.json().classStaffId).to.be.equal(classStaffId);\r",
					"            pm.expect(pm.response.json().classStatus).to.be.equal(classStatus);\r",
					"            pm.expect(pm.response.json().classTopic).to.be.equal(classTopic);\r",
					"            pm.expect(pm.response.json().batchName).to.be.equal(batchName);\r",
					"        });\r",
					"\r",
					"        pm.test(\"Data type in the response body\", () => {\r",
					"            pm.expect(pm.response.json().csId).to.be.a('number'); \r",
					"            pm.expect(pm.response.json().batchId).to.be.a('number'); \r",
					"            pm.expect(pm.response.json().classComments).to.be.a('string'); \r",
					"            pm.expect(pm.response.json().classDate).to.be.a('string'); \r",
					"            pm.expect(pm.response.json().classDescription).to.be.a('string'); \r",
					"            pm.expect(pm.response.json().classNo).to.be.a('number'); \r",
					"            pm.expect(pm.response.json().classNotes).to.be.a('string'); \r",
					"            pm.expect(pm.response.json().classRecordingPath).to.be.a('string'); \r",
					"            pm.expect(pm.response.json().classStaffId).to.be.a('string'); \r",
					"            pm.expect(pm.response.json().classStatus).to.be.a('string'); \r",
					"            pm.expect(pm.response.json().classTopic).to.be.a('string'); \r",
					"            pm.expect(pm.response.json().batchName).to.be.a('string'); \r",
					"            pm.expect(pm.response.json().classScheduledDates).to.be.an('array');\r",
					"        });\r",
					"    },\r",
					"\r",
					"    classRecPathDataValidation: function (classId, classRecordingPath) {\r",
					"        pm.test(\"Data validations in the response body\", () => {\r",
					"            pm.expect(pm.response.json().csId).to.be.equal(classId);          \r",
					"            pm.expect(pm.response.json().classRecordingPath).to.be.equal(classRecordingPath);            \r",
					"        });\r",
					"\r",
					"        pm.test(\"Data type in the response body\", () => {\r",
					"            pm.expect(pm.response.json().csId).to.be.a('number');             \r",
					"            pm.expect(pm.response.json().classRecordingPath).to.be.a('string');             \r",
					"        });\r",
					"    },\r",
					"\r",
					"    classPostPutSchemaValidation: function() {\r",
					"        pm.test(\"Response schema is valid\", function () {\r",
					"    const schema = {\r",
					"        \"type\": \"object\",\r",
					"            \"additionalProperties\": false,\r",
					"            \"properties\": {\r",
					"                \"csId\": {\"type\": \"integer\"},\r",
					"                \"batchId\": {\"type\": \"integer\"},\r",
					"                \"classNo\": {\"type\": \"integer\"},\r",
					"                \"classDate\": {\"type\": \"string\",\"format\": \"date-time\"},\r",
					"                \"classTopic\": {\"type\": \"string\"},\r",
					"                \"classStatus\": {\"type\": \"string\"},\r",
					"                \"classStaffId\": {\"type\": \"string\"},\r",
					"                \"classDescription\": {\"anyOf\": [{\"type\": \"null\"},{\"type\": \"string\"}]},\r",
					"                \"classComments\": {\"anyOf\": [{\"type\": \"null\"},{\"type\": \"string\"}]},\r",
					"                \"classNotes\": {\"anyOf\": [{\"type\": \"null\"},{\"type\": \"string\",\"qt-uri-protocols\": [\"https\"]}]},\r",
					"                \"classRecordingPath\": {\"anyOf\": [{\"type\": \"null\"},{\"type\": \"string\",\"qt-uri-protocols\": [\"https\"]}]},\r",
					"                \"batchName\": {\"type\": \"string\"},\r",
					"                \"classScheduledDates\": {\r",
					"                    \"anyOf\": [\r",
					"                        {\r",
					"                            \"type\": \"array\",\r",
					"                            \"items\": {\r",
					"                                \"type\": \"string\",\r",
					"                                \"format\": \"date-time\"\r",
					"                            }\r",
					"                        },\r",
					"                        {\"type\": \"null\"}\r",
					"                    ]\r",
					"                }\r",
					"            },\r",
					"            \"required\": [\r",
					"                \"batchId\",\r",
					"                \"batchName\",\r",
					"                \"classDate\",\r",
					"                \"classNo\",\r",
					"                \"classStatus\",\r",
					"                \"classTopic\",\r",
					"                \"classStaffId\",\r",
					"                \"csId\"\r",
					"            ],\r",
					"    }\r",
					"            pm.expect(pm.response.json()).to.have.jsonSchema(schema);\r",
					"        });\r",
					"    }\r",
					"}\r",
					"\r",
					""
				]
			}
		}
	]
}