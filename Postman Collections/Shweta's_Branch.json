{
	"info": {
		"_postman_id": "da1d67c2-b685-48cd-8ce7-64de748e062e",
		"name": "Team2_API Commandos",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Data Driven",
			"item": [
				{
					"name": "UserLogin",
					"item": [
						{
							"name": "User Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ae8d7c71-2e67-4086-a1c3-8d097bb3f7c6",
										"exec": [
											"const scenario = pm.variables.get(\"scenario\");\r",
											"\r",
											"bodyData = pm.response.json();\r",
											"TokenValue = bodyData.token;\r",
											"console.log(\"Token: \" + TokenValue);\r",
											"pm.globals.set(\"token\", TokenValue);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e2cc25f0-8b69-4f7b-a56c-0ccb258faf19",
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "7889e10e-84cd-45cc-9641-b600e90c308e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"userLoginEmailId\": \"{{userLoginEmailId}}\",\n    \"password\": \"{{password}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": ""
							},
							"response": []
						}
					],
					"id": "3904f76b-f95c-48b0-99d8-d00eefa98c51"
				},
				{
					"name": "Program",
					"item": [
						{
							"name": "Create Program with valid Authorization",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "72b68a08-9e1e-4d6c-88c8-8b95b1a978cd",
										"exec": [
											"const expectedStatusCode = pm.variables.get(\"expectedStatusCode\");\r",
											"const expectedStatusMessage = pm.variables.get(\"expectedStatusMessage\");\r",
											"const expectedErrorMessage = pm.variables.get(\"expectedErrorMessage\");\r",
											"const expectedResponseStatus = pm.variables.get(\"expectedResponseStatus\");\r",
											"const programDescription = pm.variables.get(\"programDescription\");\r",
											"const programName = pm.variables.get(\"programName\");\r",
											"const programStatus = pm.variables.get(\"programStatus\");\r",
											"const scenario = pm.variables.get(\"scenario\");\r",
											"\r",
											"console.log(\"Scenario: \"+ scenario);\r",
											"\r",
											"if ((scenario === \"create program with valid data first program\") || (scenario === \"create program with valid data second program\")) { \r",
											"\r",
											"let bodyData = pm.response.json();\r",
											"\r",
											"let pgrmId = bodyData.programId;\r",
											"let pgrmName = bodyData.programName;\r",
											"\r",
											"//To add the batch ids to an array\r",
											"var programIDs = pm.collectionVariables.get(\"programIDs\");\r",
											"    if (!programIDs) {\r",
											"        programIDs = [];\r",
											"    } else {\r",
											"        programIDs = JSON.parse(programIDs);\r",
											"    }\r",
											"\r",
											"    programIDs.push(pgrmId);    \r",
											"    pm.collectionVariables.set(\"programIDs\", JSON.stringify(programIDs));\r",
											"\r",
											"    var programNames = pm.collectionVariables.get(\"programNames\");\r",
											"    if (!programNames) {\r",
											"        programNames = [];\r",
											"    } else {\r",
											"        programNames = JSON.parse(programNames);\r",
											"    }\r",
											"    \r",
											"    programNames.push(pgrmName);    \r",
											"    pm.collectionVariables.set(\"programNames\", JSON.stringify(programNames));\r",
											"    //Storing the batchIds as local variable to use in consecutive operations\r",
											"    if (programIDs.length === 1) {\r",
											"        pm.collectionVariables.set(\"ProgramId1\", pgrmId); \r",
											"        pm.collectionVariables.set(\"ProgramName1\", pgrmName); \r",
											"        console.log(\"ProgramId1:\"+pgrmId);\r",
											"        console.log(\"ProgramName1:\"+pgrmName);\r",
											"    }   else if (programIDs.length === 2) {\r",
											"        let ProgramId2 = pgrmId;\r",
											"        pm.collectionVariables.set(\"ProgramId2\", pgrmId);\r",
											"        pm.collectionVariables.set(\"ProgramName2\", pgrmName); \r",
											"        console.log(\"ProgramId2:\" + pgrmId);\r",
											"        console.log(\"ProgramName2:\" + pgrmName);\r",
											"    }\r",
											"\r",
											"    commonTests.checkStatusLine(expectedStatusCode, expectedStatusMessage);\r",
											"    commonTests.checkResponseTime();\r",
											"    commonTests.checkResponseHeader();\r",
											"    commonTests.checkResponseHasBody(); \r",
											"    commonTests.ProgramDataValidation(programName, programDescription, programStatus);\r",
											"    commonTests.programPostPutSchemaValidation();\r",
											"}\r",
											"// } else if ((scenario === \"create program with existing program\") || (scenario === \"create program without Authorization\") || (scenario === \"create program with no value in status\") || (scenario === \"create program with no value in program name\") || (scenario === \"create program with interger value in program name\") || (scenario === \"create program with invalid baseurl\") || (scenario === \"create program with invalid endpoint\") || (scenario === \"create program with already existing program\") || (scenario === \"create program with no values in all fields\")) {\r",
											"//         commonTests.checkStatusLine(expectedStatusCode, expectedStatusMessage);\r",
											"//         commonTests.checkResponseTime();        \r",
											"// } else {\r",
											"//     commonTests.checkStatusLine(expectedStatusCode, expectedStatusMessage);\r",
											"//     commonTests.checkResponseTime();\r",
											"//     commonTests.checkResponseHeader();\r",
											"//     commonTests.checkResponseHasBody();\r",
											"//     commonTests.checkErrorMsg(expectedErrorMessage, expectedResponseStatus);    \r",
											"// }\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1a18c166-b99a-45cb-9c01-4c3c113f8dad",
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "4d3de0d3-6ccb-49ea-83a9-b21c76968286",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": ""
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"programDescription\": \"{{programDescription}}\",\r\n    \"programName\": \"{{programName}}\",\r\n    \"programStatus\": \"{{programStatus}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": ""
							},
							"response": []
						},
						{
							"name": "Create Program with Invalid Test Data",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "72b68a08-9e1e-4d6c-88c8-8b95b1a978cd",
										"exec": [
											"const expectedStatusCode = pm.variables.get(\"expectedStatusCode\");\r",
											"const expectedStatusMessage = pm.variables.get(\"expectedStatusMessage\");\r",
											"const expectedErrorMessage = pm.variables.get(\"expectedErrorMessage\");\r",
											"const expectedResponseStatus = pm.variables.get(\"expectedResponseStatus\");\r",
											"const programDescription = pm.variables.get(\"programDescription\");\r",
											"const programName = pm.variables.get(\"programName\");\r",
											"const programStatus = pm.variables.get(\"programStatus\");\r",
											"const scenario = pm.variables.get(\"scenario\");\r",
											"console.log(\"Scenario: \"+ scenario);\r",
											"\r",
											"if ((scenario === \"create program with existing program\") || (scenario === \"create program without Authorization\") || (scenario === \"create program with no value in status\") || (scenario === \"create program with no value in program name\") || (scenario === \"create program with interger value in program name\") || (scenario === \"create program with invalid baseurl\") || (scenario === \"create program with invalid endpoint\") || (scenario === \"create program with already existing program\") || (scenario === \"create program with no values in all fields\")) {\r",
											"        commonTests.checkStatusLine(expectedStatusCode, expectedStatusMessage);\r",
											"        commonTests.checkResponseTime();        \r",
											"} else {\r",
											"    commonTests.checkStatusLine(expectedStatusCode, expectedStatusMessage);\r",
											"    commonTests.checkResponseTime();\r",
											"    commonTests.checkResponseHeader();\r",
											"    commonTests.checkResponseHasBody();\r",
											"    commonTests.checkErrorMsg(expectedErrorMessage, expectedResponseStatus);    \r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1a18c166-b99a-45cb-9c01-4c3c113f8dad",
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "78cc21c4-7d3f-4816-9b51-b94709047031",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": ""
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"programDescription\": \"{{programDescription}}\",\r\n    \"programName\": \"{{programName}}\",\r\n    \"programStatus\": \"{{programStatus}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": ""
							},
							"response": []
						},
						{
							"name": "User with valid Authorization Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "72b68a08-9e1e-4d6c-88c8-8b95b1a978cd",
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "2b9aaf3a-4935-444c-8c46-ec21d6d1e017",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"programDescription\": \"APINov1990\",\r\n    \"programName\": \"TNApiHackathonJaFebn\",\r\n    \"programStatus\": \"Active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}saveprograme"
							},
							"response": []
						},
						{
							"name": "Get All Program",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6cb86cbf-dbea-455e-88ad-7fe8cbd20a01",
										"exec": [
											"const expectedStatusCode = pm.variables.get(\"expectedStatusCode\");\r",
											"const expectedStatusMessage = pm.variables.get(\"expectedStatusMessage\");\r",
											"const scenario = pm.variables.get(\"scenario\");\r",
											"console.log(\"Scenario: \"+ scenario);\r",
											"\r",
											"    commonTests.checkStatusLine(expectedStatusCode, expectedStatusMessage);\r",
											"    commonTests.checkResponseTime();\r",
											"    commonTests.checkResponseHasBody()\r",
											"\r",
											"    if ((scenario === \"Get All Program without Authorization\")) { \r",
											"\r",
											"    commonTests.checkStatusLine(expectedStatusCode, expectedStatusMessage);\r",
											"    commonTests.checkResponseTime();\r",
											"    }else{\r",
											"\r",
											"    commonTests.checkStatusLine(expectedStatusCode, expectedStatusMessage);\r",
											"    commonTests.checkResponseTime();\r",
											"    commonTests.checkResponseHasBody()\r",
											"\r",
											"    }\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "49558336-1809-4218-b3ae-2dd5a1dec453",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": ""
									}
								},
								"method": "GET",
								"header": [],
								"url": ""
							},
							"response": []
						},
						{
							"name": "Get All Program Copy",
							"id": "4a00c47a-2e1b-4111-9419-fc2072977b57",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{token}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}allPrograms"
							},
							"response": []
						},
						{
							"name": "Get All program with user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "59e9f31c-4e90-41f4-9201-d7c016e8d5ad",
										"exec": [
											"const expectedStatusCode = pm.variables.get(\"expectedStatusCode\");\r",
											"const expectedStatusMessage = pm.variables.get(\"expectedStatusMessage\");\r",
											"const scenario = pm.variables.get(\"scenario\");\r",
											"console.log(\"Scenario: \"+ scenario);\r",
											"\r",
											"    commonTests.checkStatusLine(expectedStatusCode, expectedStatusMessage);\r",
											"    commonTests.checkResponseTime();\r",
											"    commonTests.checkResponseHasBody()\r",
											"\r",
											"       if (scenario === \"Get All program with user without Authorization\") { \r",
											"\r",
											"    commonTests.checkStatusLine(expectedStatusCode, expectedStatusMessage);\r",
											"    commonTests.checkResponseTime();\r",
											"    }else{\r",
											"\r",
											"        commonTests.checkStatusLine(expectedStatusCode, expectedStatusMessage);\r",
											"    commonTests.checkResponseTime();\r",
											"    commonTests.checkResponseHasBody()\r",
											"\r",
											"    }"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "d3fb38be-1c3b-4d3d-b13a-61d7cb75891e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": ""
									}
								},
								"method": "GET",
								"header": [],
								"url": ""
							},
							"response": []
						},
						{
							"name": "Get Program By ProgramId",
							"id": "dca9684e-4ed4-428c-80a9-3e6c90ebb055",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": ""
									}
								},
								"method": "GET",
								"header": [],
								"url": ""
							},
							"response": []
						},
						{
							"name": "Program By ProgramId Copy",
							"id": "f340cbab-4e09-425e-a935-c5dbbee851b0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{token}}"
									}
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}programs/16857"
							},
							"response": []
						},
						{
							"name": "Update Program By Program Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "595b59ad-97da-4a76-bb6f-7cddcbfc081c",
										"exec": [
											"bodyData = pm.response.json();\r",
											"dPgrmName = bodyData.programName,\r",
											"console.log(\"pgrmName1: \" + dPgrmName)\r",
											"pm.environment.set(\"pgrmName1\", dPgrmName);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "ec8e42c5-ec38-40f9-8e96-ee8d29b1b470",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": ""
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"{{programDescription}}\",\r\n  \"programName\": \"{{programName}}\",\r\n  \"programStatus\": \"{{programStatus}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": ""
							},
							"response": []
						},
						{
							"name": "Update Program By Program Name Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "595b59ad-97da-4a76-bb6f-7cddcbfc081c",
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "419a7246-a9d4-4cc9-b20f-b7cc8fad30ce",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{token}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"programDescription\": \"APITestingWithPostman\",\r\n    \"programName\": \"TeamTwoCommandos\",\r\n    \"programStatus\": \"active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}program/TeamTwoCommandos"
							},
							"response": []
						},
						{
							"name": "Update Program by Program Id",
							"id": "4104d59d-0551-412f-ae42-6c514c96811b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": ""
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"programDescription\": \"{{programDescription}}\",\r\n    \"programName\": \"{{programName}}\",\r\n    \"programStatus\": \"{{programStatus}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": ""
							},
							"response": []
						},
						{
							"name": "Update Program by Program Id Copy",
							"id": "29c3594f-8cd2-4271-a1f5-3f0082d9e08a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{token}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"programDescription\": \"SelApi\",\r\n    \"programName\": \"TestProgramForHackathon\",\r\n    \"programStatus\": \"Active\"\r\n},",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}putprogram/16326"
							},
							"response": []
						}
					],
					"id": "114341cc-a29f-4c9a-b35a-fa7fbf35d4c2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "badd6583-ea27-4aeb-bbd0-655c1fb5d256",
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"// if(typeof pm.variables.get('requestData') !== 'object')\r",
									"// {\r",
									"//     pm.variables.set('requestData', pm.iterationData.toObject());\r",
									"// }\r",
									"\r",
									"// const requestData = pm.variables.get('requestData');\r",
									"\r",
									"// if(typeof requestData != 'object' || Object.keys(requestData).length === 0)\r",
									"// {\r",
									"//     console.log('No external data provided/data set is empty');\r",
									"//     return;\r",
									"// }\r",
									"\r",
									"// const currentRequest = requestData.requests.filter(({name}) => name === pm.info.requestName)[0];\r",
									"\r",
									"// if(!currentRequest){\r",
									"//     console.log('Request ${pm.info.requestName} has no data.');\r",
									"// }\r",
									"\r",
									"// if(currentRequest){\r",
									"\r",
									"//     const variables = currentRequest.data.shift();\r",
									"\r",
									"//     Object.entries(variables).forEach(([key, value]) => {\r",
									"//         pm.variables.set(key, value);\r",
									"//     });\r",
									"\r",
									"// let baseUrl;\r",
									"\r",
									"// if (variables.scenario.toLowerCase().includes(\"invalid baseurl\")) {\r",
									"//     baseUrl = pm.environment.get(\"invalidBaseURL\");\r",
									"// } else {  \r",
									"//     baseUrl = pm.environment.get(\"baseURL\");\r",
									"// }\r",
									"\r",
									"// const endpoint = variables.endpoint; \r",
									"\r",
									"// let fullURL;\r",
									"\r",
									"// if ((pm.info.requestName=== \"Update Class\") || (pm.info.requestName=== \"Delete Class\")) {\r",
									"//     const classId = pm.environment.get(\"classID\");\r",
									"//     fullURL = baseUrl + endpoint.replace(\"{classId}\", classId);  \r",
									"// } else {\r",
									"//     fullURL = baseUrl + endpoint; \r",
									"// }\r",
									"\r",
									"// //pm.variables.set('url', fullURL); \r",
									"\r",
									"// pm.request.url = fullURL;\r",
									"\r",
									"//     if (variables.includeAuth.toLowerCase() === 'true') {\r",
									"//         const token = pm.globals.get('token');  \r",
									"//         pm.request.headers.add({ key: 'Authorization', value: `Bearer ${token}` });\r",
									"//     } else {\r",
									"//        console.log(\"No Authorization header needed\"); \r",
									"//     }\r",
									"\r",
									"//     pm.variables.set('requestData', requestData);\r",
									"\r",
									"//     if(currentRequest.data.length > 0){\r",
									"//         pm.execution.setNextRequest(pm.info.requestName);\r",
									"//     }\r",
									"// }\t\t\r",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ed1070a2-f428-43bd-bc8a-6312b0a497f1",
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "ProgramBatch",
					"item": [],
					"id": "e0eaffb0-edcf-4d9d-9f96-1f3348adaf4d"
				},
				{
					"name": "Class",
					"item": [
						{
							"name": "New Request",
							"id": "631b7211-d45d-434d-94e1-69f9b4e4c506",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"classComments\": \"Java 1223Opps\",\r\n    \"classDate\": \"2024-12-09\",\r\n    \"classDescription\": \"description\",\r\n    \"classNo\": 2,\r\n    \"classNotes\": \"notes123\",\r\n    \"classRecordingPath\": \"C:/Recordings\",\r\n    \"classStaffId\": \"U49\",\r\n    \"classStatus\": \"Active\",\r\n    \"classTopic\": \"super keywords AC13\",\r\n    \"classScheduledDates_1\": \"2024-11-26T15:11:08.750+00:00\",\r\n    \"classScheduledDates_2\": \"2024-11-26T15:11:08.750+00:00\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}CreateClassSchedule"
							},
							"response": []
						}
					],
					"id": "88bad502-b9f6-4436-8b20-776da1e0b360"
				},
				{
					"name": "ProgramBatchMapController",
					"item": [],
					"id": "5ee92f3d-ac17-4ab2-9db8-c30e7db4a214"
				},
				{
					"name": "Delete",
					"item": [
						{
							"name": "Delete Program By Program ID",
							"id": "2ab6af3a-1cd4-4a65-b0d7-2198bb8d9622",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{TokenValue}}"
									}
								},
								"method": "DELETE",
								"header": [],
								"url": ""
							},
							"response": []
						},
						{
							"name": "Program By ProgramID Copy",
							"id": "0b8bdc99-6475-4321-9ebd-50396dd63091",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{token}}"
									}
								},
								"method": "DELETE",
								"header": [],
								"url": "{{baseURL}}deletebyprogid/17047"
							},
							"response": []
						},
						{
							"name": "Delete Program By Program Name",
							"id": "4aa5b682-5584-486e-916b-9c7bd0d5d133",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": ""
									}
								},
								"method": "DELETE",
								"header": [],
								"url": ""
							},
							"response": []
						},
						{
							"name": "Program By ProgramName Copy",
							"id": "28651e70-e2db-48d1-ad9c-f1726c3e6d0e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{token}}"
									}
								},
								"method": "DELETE",
								"header": [],
								"url": "{{baseURL}}deletebyprognam/TestProgramForHackathon"
							},
							"response": []
						}
					],
					"id": "c7c00dcb-4d40-495d-82fd-5afb449024aa"
				}
			],
			"id": "e72d43c4-1b46-4fff-93b1-bc39d1bb680b"
		},
		{
			"name": "Negative Scenarios",
			"item": [
				{
					"name": "UserLogin",
					"item": [
						{
							"name": "New Request",
							"id": "cbcd36e8-e58f-4efc-b1e3-34a03fde977c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": []
							},
							"response": []
						}
					],
					"id": "64805ef9-625b-496b-954d-157af5a20a8e"
				},
				{
					"name": "Program",
					"item": [
						{
							"name": "Invalid/No Authorization",
							"id": "755bf0cc-c110-4ab6-ba00-e6c7c1d0ef75",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": ""
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"programDescription\": \"APITesting\",\r\n    \"programName\": \"TeamTwo-Commando\",\r\n    \"programStatus\": \"Active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}saveprogram"
							},
							"response": [
								{
									"id": "2509ace0-6829-4b34-9d1a-936c7c90e254",
									"name": "Invalid/No Authorization",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"programDescription\": \"APITesting\",\r\n    \"programName\": \"TeamTwo-Commando\",\r\n    \"programStatus\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}saveprogram"
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1731017774&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=Zyac21k1l28v7H906p4Jv2bJIMwGYOrA4PSdPOMakJE%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1731017774&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=Zyac21k1l28v7H906p4Jv2bJIMwGYOrA4PSdPOMakJE%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Thu, 07 Nov 2024 22:16:14 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"message\": \"Invalid Status: must be Active or Inactive\",\n    \"success\": false\n}"
								}
							]
						},
						{
							"name": "With Invalid Base Url",
							"id": "d9b41e39-aed5-4078-859f-041d0b5e5b02",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{TokenValue}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"programDescription\": \"APITestingHackathon\",\r\n    \"programName\": \"TeamTwo-Commandos\",\r\n    \"programStatus\": \"Active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{inValidBaseUrl}}saveprogram"
							},
							"response": []
						},
						{
							"name": "With Invalid EndPoint",
							"id": "3813258d-50b0-4336-81bb-45fd78121f84",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{TokenValue}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"programDescription\": \"APITestingHackathon\",\r\n    \"programName\": \"TeamTwo-Commandos\",\r\n    \"programStatus\": \"Active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}saveprogra"
							},
							"response": []
						}
					],
					"id": "1790cc56-a4e7-4940-8e5c-bab225a8c902"
				},
				{
					"name": "ProgramBatch",
					"item": [],
					"id": "174a2a49-b832-47aa-b437-379f52bbcab0"
				},
				{
					"name": "Class",
					"item": [],
					"id": "665c4893-d717-486f-82e1-5b412c77150d"
				},
				{
					"name": "ProgramBatchMapController",
					"item": [],
					"id": "da8e061d-237b-4a10-83fa-53c842c15ec4"
				},
				{
					"name": "Delete",
					"item": [],
					"id": "36a9244f-3419-4919-86c0-e46e96cc1fd9"
				}
			],
			"id": "33877c4f-0762-435a-87ff-d9211c68a4cb"
		},
		{
			"name": "Logout",
			"item": [],
			"id": "e4b46eb0-9252-462c-acbc-0eee36b2d8f1"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "75cc46e1-bc0b-428e-8d87-2b72d8e2d661",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"if(typeof pm.variables.get('requestData') !== 'object')\r",
					"{\r",
					"    pm.variables.set('requestData', pm.iterationData.toObject());\r",
					"}\r",
					"\r",
					"const requestData = pm.variables.get('requestData');\r",
					"\r",
					"if(typeof requestData != 'object' || Object.keys(requestData).length === 0)\r",
					"{\r",
					"    console.log('No external data provided/data set is empty');\r",
					"    return;\r",
					"}\r",
					"\r",
					"const currentRequest = requestData.requests.filter(({name}) => name === pm.info.requestName)[0];\r",
					"\r",
					"if(!currentRequest){\r",
					"    console.log('Request ${pm.info.requestName} has no data.');\r",
					"}\r",
					"\r",
					"if(currentRequest){\r",
					"\r",
					"    const variables = currentRequest.data.shift();\r",
					"\r",
					"    Object.entries(variables).forEach(([key, value]) => {\r",
					"        pm.variables.set(key, value);\r",
					"    });\r",
					"\r",
					"let baseUrl;\r",
					"\r",
					"if (variables.scenario.toLowerCase().includes(\"invalid baseurl\")) {\r",
					"    baseUrl = pm.environment.get(\"invalidBaseURL\");\r",
					"} else {  \r",
					"    baseUrl = pm.environment.get(\"baseURL\");\r",
					"}\r",
					"\r",
					"const endpoint = variables.endpoint; \r",
					"\r",
					"let fullURL = baseUrl + endpoint; \r",
					"\r",
					"pm.request.url = fullURL;\r",
					" \r",
					"\r",
					"    if (variables.includeAuth.toLowerCase() === 'true') {\r",
					"        const token = pm.globals.get('token');  \r",
					"        pm.request.headers.add({ key: 'Authorization', value: `Bearer ${token}` });\r",
					"    } else {\r",
					"       console.log(\"No Authorization header needed\"); \r",
					"    }\r",
					"\r",
					"    pm.variables.set('requestData', requestData);\r",
					"\r",
					"    if(currentRequest.data.length > 0){\r",
					"       pm.execution.setNextRequest(pm.info.requestName);\r",
					"    }\r",
					"}\t\t"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "7cb64636-5f25-4b7d-a1e9-c4e28767b812",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"commonTests = {\r",
					"    checkStatusLine: function(expectedStatusCode, expectedStatusMessage) {\r",
					"        pm.test(`Status code is ${expectedStatusCode}`, () => {\r",
					"            pm.response.to.have.status(expectedStatusCode);  \r",
					"        });\r",
					"        pm.test(`Status message is '${expectedStatusMessage}'`, () => {\r",
					"            pm.response.to.have.status(expectedStatusMessage);\r",
					"        });        \r",
					"    },\r",
					"\r",
					"    checkResponseHeader: function() {\r",
					"        pm.test(\"Response Header Content-Type is application/json\", function () {\r",
					"            pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
					"        });\r",
					"    },\r",
					"\r",
					"    checkResponseHasBody: function() {\r",
					"        pm.test(\"Verify Response has Body or not\", function(){\r",
					"            pm.response.to.be.withBody;\r",
					"        });\r",
					"    },\r",
					"\r",
					"    checkResponseBodyAsJson: function() {\r",
					"        pm.test(\"Verify Response Body as JSON\", function(){\r",
					"            pm.response.to.be.json;\r",
					"        });\r",
					"    },\r",
					"\r",
					"    checkResponseTime: function() {\r",
					"        pm.test(\"Response time is less than 500ms\", function () {\r",
					"            pm.expect(pm.response.responseTime).to.be.below(700);\r",
					"        });\r",
					"    },\r",
					"    \r",
					"    checkErrorMessage: function(expectedResponseMessage, expectedResponseStatus) {      \r",
					"        pm.test(\"Check if error message matches expected\", function () {\r",
					"        pm.expect(pm.response.json().message).to.eql(expectedResponseMessage); \r",
					"        });\r",
					"\r",
					"        pm.test(\"Check if response status is as expected\", function () {\r",
					"        pm.expect(pm.response.json().success).to.eql(expectedResponseStatus); \r",
					"        });\r",
					"    },\r",
					"        checkErrorMsg: function(expectedErrorMessage) {\r",
					"        pm.test(\"Check if error message matches expected\", function () {\r",
					"        // Check if the response body contains the message field\r",
					"        pm.expect(pm.response.json()).to.have.property('message');\r",
					"\r",
					"        // Assert that the message field matches the expected error message\r",
					"        pm.expect(pm.response.json().message).to.eql(expectedErrorMessage);\r",
					"    });\r",
					"},\r",
					"\r",
					"    ProgramDataValidation: function (programName, programDescription, programStatus) {\r",
					"        pm.test(\"Data validations in the response body\", () => {\r",
					"            pm.expect(pm.response.json().programId).is.not.null;           \r",
					"            pm.expect(pm.response.json().programName).to.be.equal(programName);\r",
					"            pm.expect(pm.response.json().programDescription).to.be.equal(programDescription);\r",
					"            pm.expect(pm.response.json().programStatus).to.be.equal(programStatus);\r",
					"            pm.expect(pm.response.json().creationTime).is.not.null;\r",
					"            pm.expect(pm.response.json().lastModTime).is.not.null;\r",
					"        });\r",
					"\r",
					"        pm.test(\"Data type in the response body\", () => {\r",
					"            pm.expect(pm.response.json().programId).to.be.a('number'); \r",
					"            pm.expect(pm.response.json().programName).to.be.a('string'); \r",
					"            pm.expect(pm.response.json().programDescription).to.be.a('string'); \r",
					"            pm.expect(pm.response.json().programStatus).to.be.a('string'); \r",
					"            pm.expect(pm.response.json().creationTime).to.be.a('string');\r",
					"            pm.expect(pm.response.json().lastModTime).to.be.a('string'); \r",
					"        });\r",
					"    },\r",
					"\r",
					"\r",
					"    programPostPutSchemaValidation: function() {\r",
					"    pm.test(\"Response schema is valid\", function () {\r",
					"    const schema = {\r",
					"  \"type\": \"object\",\r",
					"  \"properties\": {\r",
					"    \"programId\": {\r",
					"      \"type\": \"integer\"\r",
					"    },\r",
					"    \"programName\": {\r",
					"      \"type\": \"string\"\r",
					"    },\r",
					"    \"programDescription\": {\r",
					"      \"type\": \"string\"\r",
					"    },\r",
					"    \"programStatus\": {\r",
					"      \"type\": \"string\"\r",
					"    },\r",
					"    \"creationTime\": {\r",
					"      \"type\": \"string\"\r",
					"    },\r",
					"    \"lastModTime\": {\r",
					"      \"type\": \"string\"\r",
					"    }\r",
					"  },\r",
					"  \"required\": [\r",
					"    \"programId\",\r",
					"    \"programName\",\r",
					"    \"programDescription\",\r",
					"    \"programStatus\",\r",
					"    \"creationTime\",\r",
					"    \"lastModTime\"\r",
					"  ]\r",
					"}\r",
					"            pm.expect(pm.response.json()).to.have.jsonSchema(schema);\r",
					"        });\r",
					"    }\r",
					"}\r",
					"\r",
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "username",
			"value": "",
			"type": "string"
		},
		{
			"key": "password",
			"value": "",
			"type": "string"
		},
		{
			"key": "baseURL",
			"value": "",
			"type": "string"
		},
		{
			"key": "invalidBaseURL",
			"value": "",
			"type": "string"
		},
		{
			"key": "classID",
			"value": ""
		},
		{
			"key": "programIDs",
			"value": ""
		},
		{
			"key": "programNames",
			"value": ""
		},
		{
			"key": "ProgramId1",
			"value": ""
		},
		{
			"key": "ProgramName1",
			"value": ""
		},
		{
			"key": "ProgramId2",
			"value": ""
		},
		{
			"key": "ProgramName2",
			"value": ""
		}
	]
}